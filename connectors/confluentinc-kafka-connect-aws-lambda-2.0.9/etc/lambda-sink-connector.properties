name=aws-lambda-sink
topics=test-topic-1
tasks.max=1
connector.class=io.confluent.connect.aws.lambda.AwsLambdaSinkConnector

confluent.topic.bootstrap.servers=localhost:9092
confluent.topic.replication.factor=1

aws.lambda.function.name=AddFunction
aws.lambda.invocation.type=sync
aws.lambda.batch.size=50

#### Configure this property to change behavior on errors, fail : to throw ConnectException, log : to log to KafkaTopic and continue processing other records, ignore : continue processing other records
behavior.on.error=fail

#### Configure this property to provide implementation. Default implementation is io.confluent.connect.aws.lambda.converters.JsonKeyValueConverter
#record.converter.class=

#### Configure this property to provide implementation. Default implementation is io.confluent.connect.aws.lambda.handlers.KafkaWriterResultHandler
#result.handler.class=

#### Configure this property to provide implementation. Default implementation is io.confluent.connect.aws.lambda.handlers.KafkaWriterErrorHandler
#error.handler.class=

#### Use the following props to allow results from lambda function to be written to kafka topic
#aws.lambda.response.topic=lambdaResponseTopic
#aws.lambda.response.bootstrap.servers=localhost:9092
#aws.lambda.response.client.id=lambda-response-producer

#### Use the following props to allow errors from lambda function to be written to kafka topic
#aws.lambda.error.topic=lambdaErrorTopic
#aws.lambda.error.bootstrap.servers=localhost:9092
#aws.lambda.error.client.id=lambda-error-producer

#### Credentials provider or provider chain to use for authentication to AWS. by default, the connector uses ``DefaultAWSCredentialsProviderChain
#aws.credentials.provider.class=

#### Configuration to allow connection establishment via proxy
#aws.lambda.proxy.url=
#aws.lambda.proxy.user=
#aws.lambda.proxy.password=